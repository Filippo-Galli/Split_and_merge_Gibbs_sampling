# Neal sampler
#=========================================================================================
## Obbligatorie per Filippo perché RcppGSL non trova le librerie GSL e nemmeno RcppGSL.h
# First, use the explicit include path from RcppGSL
Sys.setenv("PKG_CXXFLAGS" = paste0("-I/home/filippo/R/x86_64-pc-linux-gnu-library/4.4/RcppGSL/include",
" -I/usr/local/include", "-O3 -Wall -Wextra -pedantic"))
Sys.setenv("PKG_CXXFLAGS" = paste0('-I"C:/Users/clau7/AppData/Local/R/win-library/4.4/RcppGSL/include"',
" -I/usr/local/include"))
# Include full library paths and libraries
Sys.setenv("PKG_LIBS" = "-L/usr/local/lib -lgsl -lgslcblas -lm")
v = c(rep(6,12),3,rep(6,3))
w = c(rep(0.25,12),0.5,rep(0.25,3))
Rcpp::sourceCpp("../code/neal_sampler.cpp")
Rcpp::sourceCpp("../code/neal_sampler.cpp")
sink()
Rcpp::sourceCpp("../code/neal_sampler.cpp")
Rcpp::sourceCpp("../code/neal_sampler.cpp")
sink()
Rcpp::sourceCpp("../code/neal_sampler.cpp")
sink.number()
sink()
Rcpp::sourceCpp("../code/neal_sampler.cpp")
Rcpp::sourceCpp("../code/neal_sampler.cpp")
sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 5,
c_i = unlist(groundTruth),
#c_i = rep(0,101),
#c_i = seq(1,101),
burnin = 0,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
sink.number()
table(unlist(groundTruth))
sink()
table(unlist(groundTruth))
sink()
Rcpp::sourceCpp("../code/neal_sampler.cpp")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 5,
c_i = unlist(groundTruth),
#c_i = rep(0,101),
#c_i = seq(1,101),
burnin = 0,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
sink()
sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 5,
c_i = unlist(groundTruth),
#c_i = rep(0,101),
#c_i = seq(1,101),
burnin = 0,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
Rcpp::sourceCpp("../code/neal_sampler.cpp")
sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 5,
c_i = unlist(groundTruth),
#c_i = rep(0,101),
#c_i = seq(1,101),
burnin = 0,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 10,
#c_i = unlist(groundTruth),
#c_i = rep(0,101),
#c_i = seq(1,101),
burnin = 0,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 10,
#c_i = unlist(groundTruth),
#c_i = rep(0,101),
#c_i = seq(1,101),
burnin = 0,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
Rcpp::sourceCpp("../code/neal_sampler.cpp")
sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 10,
#c_i = unlist(groundTruth),
#c_i = rep(0,101),
#c_i = seq(1,101),
burnin = 0,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 10,
#c_i = unlist(groundTruth),
c_i = rep(0,101),
#c_i = seq(1,101),
burnin = 0,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
Rcpp::sourceCpp("../code/neal_sampler.cpp")
sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 10,
#c_i = unlist(groundTruth),
#c_i = rep(0,101),
#c_i = seq(1,101),
burnin = 0,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 10,
c_i = unlist(groundTruth),
#c_i = rep(0,101),
#c_i = seq(1,101),
burnin = 0,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
library(AntMAN)
library(mcclust.ext)
library(ggplot2)
library(tidyverse)
source("../code/complement_functions.R")
#=========================================================================================
# Loading data
#=========================================================================================
zoo=read.table("../data/zoo.data", h=F, sep=",")
nam = zoo$V1
groundTruth = zoo$V18
#classes = factor(groundTruth,labels=c("mammals", "birds", "reptiles", "fish",
#"amphibians", "insects", "mollusks"))
#names(groundTruth)<-classes
#=========================================================================================
# Data cleaning
#=========================================================================================
zoo = as.matrix(zoo[,-c(1,18)]+1)
zoo[,13] = ifelse(zoo[,13]==3,2,
ifelse(zoo[,13]==5,3,
ifelse(zoo[,13]==6,4,
ifelse(zoo[,13]==7,5,
ifelse(zoo[,13]==9,6,
1)))))
n = nrow(zoo)
p = ncol(zoo)
mm = apply(zoo, 2, function(x){length(table(x))})
#=========================================================================================
# Neal sampler
#=========================================================================================
## Obbligatorie per Filippo perché RcppGSL non trova le librerie GSL e nemmeno RcppGSL.h
# First, use the explicit include path from RcppGSL
Sys.setenv("PKG_CXXFLAGS" = paste0("-I/home/filippo/R/x86_64-pc-linux-gnu-library/4.4/RcppGSL/include",
" -I/usr/local/include", "-O3 -Wall -Wextra -pedantic"))
Sys.setenv("PKG_CXXFLAGS" = paste0('-I"C:/Users/clau7/AppData/Local/R/win-library/4.4/RcppGSL/include"',
" -I/usr/local/include"))
# Include full library paths and libraries
Sys.setenv("PKG_LIBS" = "-L/usr/local/lib -lgsl -lgslcblas -lm")
v = c(rep(6,12),3,rep(6,3))
w = c(rep(0.25,12),0.5,rep(0.25,3))
Rcpp::sourceCpp("../code/neal_sampler.cpp")
#sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 10,
c_i = unlist(groundTruth),
#c_i = rep(0,101),
#c_i = seq(1,101),
burnin = 0,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
Rcpp::sourceCpp("../code/neal_sampler.cpp")
#sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 10,
c_i = unlist(groundTruth),
#c_i = rep(0,101),
#c_i = seq(1,101),
burnin = 0,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
#sink()
L_plurale <- c(7)
#sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 10,
c_i = unlist(groundTruth),
#c_i = rep(0,101),
#c_i = seq(1,101),
burnin = 0,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
Rcpp::sourceCpp("../code/neal_sampler.cpp")
#sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 10,
c_i = unlist(groundTruth),
#c_i = rep(0,101),
#c_i = seq(1,101),
burnin = 0,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
#sink()
L_plurale <- c(7)
Rcpp::sourceCpp("../code/neal_sampler.cpp")
#sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 10,
c_i = unlist(groundTruth),
#c_i = rep(0,101),
#c_i = seq(1,101),
burnin = 0,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
Rcpp::sourceCpp("../code/neal_sampler.cpp")
#sink()
L_plurale <- c(7)
iterations <- 1000
burnin <- 0
#sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 10,
c_i = unlist(groundTruth),
#c_i = rep(0,101),
#c_i = seq(1,101),
burnin = burnin,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
table(run$c_i)
Rcpp::sourceCpp("../code/neal_sampler.cpp")
Rcpp::sourceCpp("../code/neal_sampler.cpp")
#sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 10,
c_i = unlist(groundTruth),
#c_i = rep(0,101),
#c_i = seq(1,101),
burnin = burnin,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
Rcpp::sourceCpp("../code/neal_sampler.cpp")
iterations <- 1
#sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 10,
c_i = unlist(groundTruth),
#c_i = rep(0,101),
#c_i = seq(1,101),
burnin = burnin,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
run$final_ass
Rcpp::sourceCpp("../code/neal_sampler.cpp")
#sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 10,
c_i = unlist(groundTruth),
#c_i = rep(0,101),
#c_i = seq(1,101),
burnin = burnin,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
run$final_ass
Rcpp::sourceCpp("../code/neal_sampler.cpp")
#sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 10,
c_i = unlist(groundTruth),
#c_i = rep(0,101),
#c_i = seq(1,101),
burnin = burnin,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
iterations <- 1000
#sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 10,
c_i = unlist(groundTruth),
#c_i = rep(0,101),
#c_i = seq(1,101),
burnin = burnin,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
table(run$final_ass)
#sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 10,
#c_i = unlist(groundTruth),
c_i = rep(0,101),
#c_i = seq(1,101),
burnin = burnin,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
table(run$final_ass)
#sink("output.txt")
run <- run_markov_chain(data = zoo,
attrisize = mm,
gamma = 0.68,
v = v,
w = w,
verbose = 0,
m = m,
iterations = iterations,
L = 10,
#c_i = unlist(groundTruth),
#c_i = rep(0,101),
c_i = seq(1,101),
burnin = burnin,
t = 2,
r = 2,
neal8 = FALSE,
split_merge = TRUE)
table(run$final_ass)
