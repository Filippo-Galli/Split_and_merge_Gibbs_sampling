print(p1)
ggsave(filename = file.path(output_dir, paste0(file_base, "_posterior_distribution.png")), plot = p1, bg = "white")
### Second plot - Trace of number of clusters
total_cls_df <- data.frame(
Iteration = seq_along(results$total_cls),
NumClusters = unlist(results$total_cls)
)
total_cls_df_long <- total_cls_df %>%
pivot_longer(cols = starts_with("NumClusters"), names_to = "variable", values_to = "value")
p2 <- ggplot(total_cls_df_long, aes(x = Iteration, y = value)) +
geom_line() +
labs(
x = "Iteration",
y = "Number of clusters",
title = paste("Trace of Number of Clusters starting from L =", l)
) +
theme_minimal()
print(p2)
ggsave(filename = file.path(output_dir, paste0(file_base, "_trace_num_clusters.png")), plot = p2, bg = "white")
### Third plot - Plot the log-likelihood
log_likelihood_df <- data.frame(
Iteration = seq_along(results$loglikelihood),
LogLikelihood = results$loglikelihood
)
p3 <- ggplot(log_likelihood_df, aes(x = Iteration, y = LogLikelihood)) +
geom_line() +
labs(
x = "Iteration",
y = "Log-Likelihood",
title = "Log-Likelihood Trace"
) +
theme_minimal()
print(p3)
ggsave(filename = file.path(output_dir, paste0(file_base, "_log_likelihood.png")), plot = p3, bg = "white")
### inter plot - Plot the log-likelihood before S&M
log_likelihood_df_bis <- data.frame(
Iteration = seq_along(results$loglikelihood_bfsam),
LogLikelihood = results$loglikelihood_bfsam
)
p3_bis <- ggplot(log_likelihood_df_bis, aes(x = Iteration, y = LogLikelihood)) +
geom_line() +
labs(
x = "Iteration",
y = "Log-Likelihood",
title = "Log-Likelihood Trace"
) +
theme_minimal()
print(p3_bis)
ggsave(filename = file.path(output_dir, paste0(file_base, "_log_likelihood_bfsm.png")), plot = p3_bis, bg = "white")
### Fourth plot - Posterior similarity matrix
# Vectorized approach to create the matrix
C <- matrix(unlist(lapply(results$c_i, function(x) x + 1)),
nrow = iterations,
ncol = nrow(zoo),
byrow = TRUE)
required_packages <- c("spam", "fields", "viridisLite")
for (pkg in required_packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
library(pkg, character.only = TRUE)
}
}
psm = comp.psm(C)
## estimated clustering
VI = minVI(psm)
# More informative output
cat("Cluster Sizes:\n")
print(table(VI$cl))
cat("\nAdjusted Rand Index:", arandi(VI$cl, groundTruth), "\n")
arandi(VI$cl, groundTruth)
png(filename = file.path(output_dir, paste0(file_base, "matrix.png")),
width = 800, height = 800)
myplotpsm(psm, classes=VI$cl, ax=F, ay=F)
dev.off()  # Close the device to save the first plot
dev.off()
# Save the second plot
png(filename = file.path(output_dir, paste0(file_base, "m_gt.png")),
width = 800, height = 800)
myplotpsm_gt(psm, groundTruth, classes=VI$cl, ax=F, ay=F)
dev.off()  # Close the device to save the second plot
png(filename = file.path(output_dir, paste0(file_base, "m_s.png")),
width = 800, height = 800)
myplotpsm_gt_sep(psm, groundTruth, classes=VI$cl, gt = 1, ax=F, ay=F)
dev.off()
}
rainbow(length(unique(classes$VI)))
rainbow(length(unique(VI$cl)))
unique(VI$cl)
ccc <- setNames(rainbow(length(unique(VI$cl))), unique(VI$cl))
ccc
ann_colors = list(     Time = c("white", "firebrick"),     CellType = c(CT1 = "#1B9E77", CT2 = "#D95F02"),     GeneClass = c(Path1 = "#7570B3", Path2 = "#E7298A", Path3 = "#66A61E") )
ann_colors
list(setNames(rainbow(length(unique(VI$cl))), unique(VI$cl)))
rm(ann_colors)
source("../code/complement_functions.R")
myplotpsm_gt(psm, groundTruth, classes=VI$cl, ax=F, ay=F)
source("../code/complement_functions.R")
myplotpsm_gt(psm, groundTruth, classes=VI$cl, ax=F, ay=F)
source("../code/complement_functions.R")
myplotpsm_gt(psm, groundTruth, classes=VI$cl, ax=F, ay=F)
source("../code/complement_functions.R")
myplotpsm_gt(psm, groundTruth, classes=VI$cl, ax=F, ay=F)
source("../code/complement_functions.R")
### Posterior similarity matrix
results_dir <- file.path(getwd(), "../results")
dir.exists(results_dir)
print(normalizePath(results_dir))
rdata_files <- list.files(results_dir, full.names = TRUE)
dev.off()  # Close any open graphic devices
graphics.off()  # Close all graphic devices
for (file in rdata_files) {
# Print file name
print(file)
l <- 7
load(file)
# Extract file name without extension
file_base <- tools::file_path_sans_ext(basename(file))
# Create a folder for saving plots if it doesn't exist
output_dir <- paste("../print/plot",file_base, sep = "_")  # Change this to your desired folder
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
### First plot - Posterior distribution of the number of clusters
# Calculation
post_total_cls = table(unlist(results$total_cls))/length(unlist(results$total_cls))
title <- paste("Posterior distribution of the number of clusters ( L =", l, ")")
df <- data.frame(cluster_found = as.numeric(names(post_total_cls)),
rel_freq = as.numeric(post_total_cls))
# Create plot
p1 <- ggplot(data = df, aes(x = factor(cluster_found), y = rel_freq)) +
geom_col() +
labs(
x = "Cluster Found",
y = "Relative Frequency",
title = title
) +
theme_minimal() +
scale_x_discrete(drop = FALSE)  # Ensures all cluster_found values are shown
print(p1)
ggsave(filename = file.path(output_dir, paste0(file_base, "_posterior_distribution.png")), plot = p1, bg = "white")
### Second plot - Trace of number of clusters
total_cls_df <- data.frame(
Iteration = seq_along(results$total_cls),
NumClusters = unlist(results$total_cls)
)
total_cls_df_long <- total_cls_df %>%
pivot_longer(cols = starts_with("NumClusters"), names_to = "variable", values_to = "value")
p2 <- ggplot(total_cls_df_long, aes(x = Iteration, y = value)) +
geom_line() +
labs(
x = "Iteration",
y = "Number of clusters",
title = paste("Trace of Number of Clusters starting from L =", l)
) +
theme_minimal()
print(p2)
ggsave(filename = file.path(output_dir, paste0(file_base, "_trace_num_clusters.png")), plot = p2, bg = "white")
### Third plot - Plot the log-likelihood
log_likelihood_df <- data.frame(
Iteration = seq_along(results$loglikelihood),
LogLikelihood = results$loglikelihood
)
p3 <- ggplot(log_likelihood_df, aes(x = Iteration, y = LogLikelihood)) +
geom_line() +
labs(
x = "Iteration",
y = "Log-Likelihood",
title = "Log-Likelihood Trace"
) +
theme_minimal()
print(p3)
ggsave(filename = file.path(output_dir, paste0(file_base, "_log_likelihood.png")), plot = p3, bg = "white")
### inter plot - Plot the log-likelihood before S&M
log_likelihood_df_bis <- data.frame(
Iteration = seq_along(results$loglikelihood_bfsam),
LogLikelihood = results$loglikelihood_bfsam
)
p3_bis <- ggplot(log_likelihood_df_bis, aes(x = Iteration, y = LogLikelihood)) +
geom_line() +
labs(
x = "Iteration",
y = "Log-Likelihood",
title = "Log-Likelihood Trace"
) +
theme_minimal()
print(p3_bis)
ggsave(filename = file.path(output_dir, paste0(file_base, "_log_likelihood_bfsm.png")), plot = p3_bis, bg = "white")
### Fourth plot - Posterior similarity matrix
# Vectorized approach to create the matrix
C <- matrix(unlist(lapply(results$c_i, function(x) x + 1)),
nrow = iterations,
ncol = nrow(zoo),
byrow = TRUE)
required_packages <- c("spam", "fields", "viridisLite")
for (pkg in required_packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
library(pkg, character.only = TRUE)
}
}
psm = comp.psm(C)
## estimated clustering
VI = minVI(psm)
# More informative output
cat("Cluster Sizes:\n")
print(table(VI$cl))
cat("\nAdjusted Rand Index:", arandi(VI$cl, groundTruth), "\n")
arandi(VI$cl, groundTruth)
png(filename = file.path(output_dir, paste0(file_base, "matrix.png")),
width = 800, height = 800)
myplotpsm(psm, classes=VI$cl, ax=F, ay=F)
dev.off()  # Close the device to save the first plot
dev.off()
# Save the second plot
png(filename = file.path(output_dir, paste0(file_base, "m_gt.png")),
width = 800, height = 800)
myplotpsm_gt(psm, groundTruth, classes=VI$cl, ax=F, ay=F)
dev.off()  # Close the device to save the second plot
png(filename = file.path(output_dir, paste0(file_base, "m_s.png")),
width = 800, height = 800)
myplotpsm_gt_sep(psm, groundTruth, classes=VI$cl, gt = 1, ax=F, ay=F)
dev.off()
graphics.off()
}
source("../code/complement_functions.R")
myplotpsm_gt(psm, groundTruth, classes=VI$cl, ax=F, ay=F)
source("../code/complement_functions.R")
myplotpsm_gt(psm, groundTruth, classes=VI$cl, ax=F, ay=F)
myplotpsm_gt_sep(psm, groundTruth, classes=VI$cl, gt = 1, ax=F, ay=F)
source("../code/complement_functions.R")
myplotpsm_gt(psm, groundTruth, classes=VI$cl, ax=F, ay=F)
myplotpsm_gt_trial(psm, groundTruth, classes=VI$cl, ax=F, ay=F)
### Posterior similarity matrix
results_dir <- file.path(getwd(), "../results")
dir.exists(results_dir)
print(normalizePath(results_dir))
rdata_files <- list.files(results_dir, full.names = TRUE)
dev.off()  # Close any open graphic devices
graphics.off()  # Close all graphic devices
for (file in rdata_files) {
# Print file name
print(file)
l <- 7
load(file)
# Extract file name without extension
file_base <- tools::file_path_sans_ext(basename(file))
# Create a folder for saving plots if it doesn't exist
output_dir <- paste("../print/plot",file_base, sep = "_")  # Change this to your desired folder
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
### First plot - Posterior distribution of the number of clusters
# Calculation
post_total_cls = table(unlist(results$total_cls))/length(unlist(results$total_cls))
title <- paste("Posterior distribution of the number of clusters ( L =", l, ")")
df <- data.frame(cluster_found = as.numeric(names(post_total_cls)),
rel_freq = as.numeric(post_total_cls))
# Create plot
p1 <- ggplot(data = df, aes(x = factor(cluster_found), y = rel_freq)) +
geom_col() +
labs(
x = "Cluster Found",
y = "Relative Frequency",
title = title
) +
theme_minimal() +
scale_x_discrete(drop = FALSE)  # Ensures all cluster_found values are shown
print(p1)
ggsave(filename = file.path(output_dir, paste0(file_base, "_posterior_distribution.png")), plot = p1, bg = "white")
### Second plot - Trace of number of clusters
total_cls_df <- data.frame(
Iteration = seq_along(results$total_cls),
NumClusters = unlist(results$total_cls)
)
total_cls_df_long <- total_cls_df %>%
pivot_longer(cols = starts_with("NumClusters"), names_to = "variable", values_to = "value")
p2 <- ggplot(total_cls_df_long, aes(x = Iteration, y = value)) +
geom_line() +
labs(
x = "Iteration",
y = "Number of clusters",
title = paste("Trace of Number of Clusters starting from L =", l)
) +
theme_minimal()
print(p2)
ggsave(filename = file.path(output_dir, paste0(file_base, "_trace_num_clusters.png")), plot = p2, bg = "white")
### Third plot - Plot the log-likelihood
log_likelihood_df <- data.frame(
Iteration = seq_along(results$loglikelihood),
LogLikelihood = results$loglikelihood
)
p3 <- ggplot(log_likelihood_df, aes(x = Iteration, y = LogLikelihood)) +
geom_line() +
labs(
x = "Iteration",
y = "Log-Likelihood",
title = "Log-Likelihood Trace"
) +
theme_minimal()
print(p3)
ggsave(filename = file.path(output_dir, paste0(file_base, "_log_likelihood.png")), plot = p3, bg = "white")
### inter plot - Plot the log-likelihood before S&M
log_likelihood_df_bis <- data.frame(
Iteration = seq_along(results$loglikelihood_bfsam),
LogLikelihood = results$loglikelihood_bfsam
)
p3_bis <- ggplot(log_likelihood_df_bis, aes(x = Iteration, y = LogLikelihood)) +
geom_line() +
labs(
x = "Iteration",
y = "Log-Likelihood",
title = "Log-Likelihood Trace"
) +
theme_minimal()
print(p3_bis)
ggsave(filename = file.path(output_dir, paste0(file_base, "_log_likelihood_bfsm.png")), plot = p3_bis, bg = "white")
### Fourth plot - Posterior similarity matrix
# Vectorized approach to create the matrix
C <- matrix(unlist(lapply(results$c_i, function(x) x + 1)),
nrow = iterations,
ncol = nrow(zoo),
byrow = TRUE)
required_packages <- c("spam", "fields", "viridisLite","colorBrewer","pheatmap")
for (pkg in required_packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
library(pkg, character.only = TRUE)
}
}
psm = comp.psm(C)
## estimated clustering
VI = minVI(psm)
# More informative output
cat("Cluster Sizes:\n")
print(table(VI$cl))
cat("\nAdjusted Rand Index:", arandi(VI$cl, groundTruth), "\n")
arandi(VI$cl, groundTruth)
png(filename = file.path(output_dir, paste0(file_base, "matrix.png")),
width = 800, height = 800)
myplotpsm(psm, classes=VI$cl, ax=F, ay=F)
dev.off()  # Close the device to save the first plot
dev.off()
# Save the second plot
png(filename = file.path(output_dir, paste0(file_base, "m_gt.png")),
width = 800, height = 800)
myplotpsm_gt(psm, groundTruth, classes=VI$cl, ax=F, ay=F)
dev.off()  # Close the device to save the second plot
png(filename = file.path(output_dir, paste0(file_base, "m_s.png")),
width = 800, height = 800)
myplotpsm_gt_sep(psm, groundTruth, classes=VI$cl, gt = 1, ax=F, ay=F)
dev.off()
graphics.off()
}
dev.off()  # Close any open graphic devices
graphics.off()  # Close all graphic devices
for (file in rdata_files) {
# Print file name
print(file)
l <- 7
load(file)
# Extract file name without extension
file_base <- tools::file_path_sans_ext(basename(file))
# Create a folder for saving plots if it doesn't exist
output_dir <- paste("../print/plot",file_base, sep = "_")  # Change this to your desired folder
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
### First plot - Posterior distribution of the number of clusters
# Calculation
post_total_cls = table(unlist(results$total_cls))/length(unlist(results$total_cls))
title <- paste("Posterior distribution of the number of clusters ( L =", l, ")")
df <- data.frame(cluster_found = as.numeric(names(post_total_cls)),
rel_freq = as.numeric(post_total_cls))
# Create plot
p1 <- ggplot(data = df, aes(x = factor(cluster_found), y = rel_freq)) +
geom_col() +
labs(
x = "Cluster Found",
y = "Relative Frequency",
title = title
) +
theme_minimal() +
scale_x_discrete(drop = FALSE)  # Ensures all cluster_found values are shown
print(p1)
ggsave(filename = file.path(output_dir, paste0(file_base, "_posterior_distribution.png")), plot = p1, bg = "white")
### Second plot - Trace of number of clusters
total_cls_df <- data.frame(
Iteration = seq_along(results$total_cls),
NumClusters = unlist(results$total_cls)
)
total_cls_df_long <- total_cls_df %>%
pivot_longer(cols = starts_with("NumClusters"), names_to = "variable", values_to = "value")
p2 <- ggplot(total_cls_df_long, aes(x = Iteration, y = value)) +
geom_line() +
labs(
x = "Iteration",
y = "Number of clusters",
title = paste("Trace of Number of Clusters starting from L =", l)
) +
theme_minimal()
print(p2)
ggsave(filename = file.path(output_dir, paste0(file_base, "_trace_num_clusters.png")), plot = p2, bg = "white")
### Third plot - Plot the log-likelihood
log_likelihood_df <- data.frame(
Iteration = seq_along(results$loglikelihood),
LogLikelihood = results$loglikelihood
)
p3 <- ggplot(log_likelihood_df, aes(x = Iteration, y = LogLikelihood)) +
geom_line() +
labs(
x = "Iteration",
y = "Log-Likelihood",
title = "Log-Likelihood Trace"
) +
theme_minimal()
print(p3)
ggsave(filename = file.path(output_dir, paste0(file_base, "_log_likelihood.png")), plot = p3, bg = "white")
### inter plot - Plot the log-likelihood before S&M
log_likelihood_df_bis <- data.frame(
Iteration = seq_along(results$loglikelihood_bfsam),
LogLikelihood = results$loglikelihood_bfsam
)
p3_bis <- ggplot(log_likelihood_df_bis, aes(x = Iteration, y = LogLikelihood)) +
geom_line() +
labs(
x = "Iteration",
y = "Log-Likelihood",
title = "Log-Likelihood Trace"
) +
theme_minimal()
print(p3_bis)
ggsave(filename = file.path(output_dir, paste0(file_base, "_log_likelihood_bfsm.png")), plot = p3_bis, bg = "white")
### Fourth plot - Posterior similarity matrix
# Vectorized approach to create the matrix
C <- matrix(unlist(lapply(results$c_i, function(x) x + 1)),
nrow = iterations,
ncol = nrow(zoo),
byrow = TRUE)
required_packages <- c("spam", "fields", "viridisLite","RColorBrewer","pheatmap")
for (pkg in required_packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
library(pkg, character.only = TRUE)
}
}
psm = comp.psm(C)
## estimated clustering
VI = minVI(psm)
# More informative output
cat("Cluster Sizes:\n")
print(table(VI$cl))
cat("\nAdjusted Rand Index:", arandi(VI$cl, groundTruth), "\n")
arandi(VI$cl, groundTruth)
png(filename = file.path(output_dir, paste0(file_base, "matrix.png")),
width = 800, height = 800)
myplotpsm(psm, classes=VI$cl, ax=F, ay=F)
dev.off()  # Close the device to save the first plot
dev.off()
# Save the second plot
png(filename = file.path(output_dir, paste0(file_base, "m_gt.png")),
width = 800, height = 800)
myplotpsm_gt(psm, groundTruth, classes=VI$cl, ax=F, ay=F)
dev.off()  # Close the device to save the second plot
png(filename = file.path(output_dir, paste0(file_base, "m_s.png")),
width = 800, height = 800)
myplotpsm_gt_sep(psm, groundTruth, classes=VI$cl, gt = 1, ax=F, ay=F)
dev.off()
graphics.off()
}
#=========================================================================================
# Gibbs sampler HMM
#=========================================================================================
source('../code/gibbs_sampler.R', echo=TRUE)
Kstar  = 7
Lambda = 7
gam    = AntMAN::AM_find_gamma_Pois(n=nrow(zoo),Lambda=Lambda,Kstar=Kstar)
prior = AM_prior_K_Pois(n=nrow(zoo), gam, Lambda = Lambda)
u = c(rep(6,12),3,rep(6,3))
v = c(rep(0.25,12),0.5,rep(0.25,3))
set.seed(57)
sim_zoo = gibbs_mix_con(G=25000,
burnin = 5000,
data=zoo,
u=u,v=v,
Lambda = Lambda,
gam = gam)
# posterior K
post_k = table(sim_zoo$k[2:25002])/length(2:25002)
# Figure S2a
xl=15
x11()
par(mar=c(3.5,2,1,1),mgp=c(2,1,0))
plot(post_k,lwd = 2,
xlab = "k", ylab="", xlim=c(1,xl),axes=F)
segments(1:xl,rep(0,xl),1:xl,prior,col="red",pch=4)
axis(1,1:xl,1:xl,cex.axis=1)
axis(2)
legend("topleft",legend=c("P(K = k)","P(K = k | data)"),
col=c("red",1),lwd=c(1,2))
## posterior similarity matrix
psm = comp.psm(sim_zoo$C[2:25002,])
## estimated clustering
VI = minVI(psm)
table(VI$cl)
arandi(VI$cl,groundTruth)
# Figure 2b
x11()
# Figure 2b
x11()
par(mar=c(2.5,2.5,1,1),mgp=c(2,1,0))
myplotpsm(psm,classes=VI$cl,ax=F,ay=F)
myplotpsm_gt_sep(psm,groundTruth,classes=VI$cl,ax=F,ay=F)
